/**
 * Cliente WebSocket para el chat en tiempo real
 *
 * Este archivo maneja:
 * 1. Conexi√≥n WebSocket con el servidor
 * 2. Env√≠o y recepci√≥n de mensajes
 * 3. Actualizaci√≥n de la interfaz en tiempo real
 * 4. Manejo de estados de conexi√≥n
 */

// Variables globales
let stompClient = null;
let connected = false;

// Elementos del DOM
const messageArea = document.getElementById('messageArea');
const messageForm = document.getElementById('messageForm');
const messageInput = document.getElementById('messageInput');
const sendButton = document.getElementById('sendButton');
const connectionStatus = document.getElementById('connectionStatus');

/**
 * Inicializa la aplicaci√≥n cuando se carga la p√°gina
 */
document.addEventListener('DOMContentLoaded', function() {
    console.log('üöÄ Iniciando cliente WebSocket...');
    console.log('üë§ Usuario actual:', window.currentUser);

    // Conectar a WebSocket
    connect();

    // Configurar formulario de env√≠o
    setupMessageForm();

    // Scroll inicial al final del historial
    scrollToBottom();

    // Focus autom√°tico en el input de mensaje
    messageInput.focus();
});

/**
 * Establece la conexi√≥n WebSocket con el servidor
 */
function connect() {
    updateConnectionStatus('connecting', 'Conectando...');

    // Crear conexi√≥n SockJS (fallback para navegadores sin WebSocket nativo)
    const socket = new SockJS('/ws');

    // Crear cliente STOMP sobre la conexi√≥n SockJS
    stompClient = Stomp.over(socket);

    // Configuraci√≥n del cliente STOMP
    stompClient.connect({}, onConnected, onError);

    console.log('üîå Intentando conectar a WebSocket...');
}

/**
 * Callback ejecutado cuando la conexi√≥n WebSocket es exitosa
 */
function onConnected() {
    console.log('‚úÖ Conectado a WebSocket');
    connected = true;
    updateConnectionStatus('connected', 'Conectado');

    // Suscribirse al canal p√∫blico de mensajes
    stompClient.subscribe('/topic/public', onMessageReceived);

    // Notificar al servidor que el usuario se uni√≥
    const joinMessage = {
        usuario: window.currentUser,
        contenido: '',
        tipo: 'JOIN'
    };

    stompClient.send("/app/chat.addUser", {}, JSON.stringify(joinMessage));

    // Habilitar el formulario de env√≠o
    enableMessageForm();
}

/**
 * Callback ejecutado cuando hay un error de conexi√≥n
 */
function onError(error) {
    console.error('‚ùå Error de conexi√≥n WebSocket:', error);
    connected = false;
    updateConnectionStatus('disconnected', 'Desconectado');

    // Deshabilitar el formulario
    disableMessageForm();

    // Intentar reconectar despu√©s de 5 segundos
    setTimeout(() => {
        console.log('üîÑ Intentando reconectar...');
        connect();
    }, 5000);
}

/**
 * Maneja los mensajes recibidos del servidor
 */
function onMessageReceived(payload) {
    const message = JSON.parse(payload.body);
    console.log('üì® Mensaje recibido:', message);

    // Agregar mensaje al √°rea de chat
    displayMessage(message);

    // Scroll autom√°tico al final
    scrollToBottom();
}

/**
 * Configura el formulario de env√≠o de mensajes
 */
function setupMessageForm() {
    messageForm.addEventListener('submit', function(event) {
        event.preventDefault();
        sendMessage();
    });

    // Enviar mensaje con Enter (pero no con Shift+Enter)
    messageInput.addEventListener('keypress', function(event) {
        if (event.key === 'Enter' && !event.shiftKey) {
            event.preventDefault();
            sendMessage();
        }
    });
}

/**
 * Env√≠a un mensaje a trav√©s de WebSocket
 */
function sendMessage() {
    const messageContent = messageInput.value.trim();

    // Validar que el mensaje no est√© vac√≠o
    if (messageContent === '') {
        return;
    }

    // Verificar que estemos conectados
    if (!connected || !stompClient) {
        alert('‚ùå No hay conexi√≥n con el servidor. Intenta recargar la p√°gina.');
        return;
    }

    // Crear objeto mensaje
    const message = {
        usuario: window.currentUser,
        contenido: messageContent,
        tipo: 'CHAT'
    };

    // Enviar mensaje al servidor
    stompClient.send("/app/chat.sendMessage", {}, JSON.stringify(message));

    // Limpiar el input y mantener el focus
    messageInput.value = '';
    messageInput.focus();

    console.log('üì§ Mensaje enviado:', message);
}

/**
 * Muestra un mensaje en el √°rea de chat
 */
function displayMessage(message) {
    const messageContainer = document.createElement('div');
    messageContainer.className = 'message-container';

    const messageDiv = document.createElement('div');
    messageDiv.className = 'message';

    // Determinar el tipo de mensaje y aplicar estilos apropiados
    if (message.usuario === 'Sistema') {
        messageDiv.classList.add('system-message');
        messageDiv.innerHTML = `
            <div class="message-content">${escapeHtml(message.contenido)}</div>
        `;
    } else {
        // Mensaje normal de usuario
        const isOwnMessage = message.usuario === window.currentUser;
        messageDiv.classList.add(isOwnMessage ? 'own-message' : 'other-message');

        // Formatear timestamp
        const timestamp = message.timestamp ? formatTimestamp(message.timestamp) : 'Ahora';

        messageDiv.innerHTML = `
            <div class="message-header">
                <span class="username">${escapeHtml(message.usuario)}</span>
                <span class="timestamp">${timestamp}</span>
            </div>
            <div class="message-content">${escapeHtml(message.contenido)}</div>
        `;
    }

    messageContainer.appendChild(messageDiv);
    messageArea.appendChild(messageContainer);
}

/**
 * Formatea un timestamp para mostrar en el chat
 */
function formatTimestamp(timestamp) {
    // Si timestamp es un array (formato de LocalDateTime de Java)
    if (Array.isArray(timestamp)) {
        // [year, month, day, hour, minute, second, nano]
        const [year, month, day, hour, minute] = timestamp;
        const date = new Date(year, month - 1, day, hour, minute);
        return date.toLocaleTimeString('es-ES', { hour: '2-digit', minute: '2-digit' });
    }

    // Si es un string ISO o timestamp normal
    const date = new Date(timestamp);
    return date.toLocaleTimeString('es-ES', { hour: '2-digit', minute: '2-digit' });
}

/**
 * Escapa caracteres HTML para prevenir XSS
 */
function escapeHtml(text) {
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
}

/**
 * Scroll autom√°tico al final del √°rea de mensajes
 */
function scrollToBottom() {
    messageArea.scrollTop = messageArea.scrollHeight;
}

/**
 * Actualiza el estado visual de la conexi√≥n
 */
function updateConnectionStatus(status, text) {
    connectionStatus.className = `connection-status status-${status}`;
    connectionStatus.querySelector('.status-text').textContent = text;
}

/**
 * Habilita el formulario de env√≠o de mensajes
 */
function enableMessageForm() {
    messageInput.disabled = false;
    sendButton.disabled = false;
    messageInput.placeholder = 'Escribe tu mensaje...';
}

/**
 * Deshabilita el formulario de env√≠o de mensajes
 */
function disableMessageForm() {
    messageInput.disabled = true;
    sendButton.disabled = true;
    messageInput.placeholder = 'Reconectando...';
}

/**
 * Manejo de desconexi√≥n cuando se cierra la ventana
 */
window.addEventListener('beforeunload', function() {
    if (stompClient && connected) {
        stompClient.disconnect();
        console.log('üëã Desconectado del WebSocket');
    }
});

/*
 * FLUJO DE COMUNICACI√ìN:
 *
 * 1. P√°gina carga ‚Üí connect() ‚Üí Conecta a /ws
 * 2. onConnected() ‚Üí Se suscribe a /topic/public
 * 3. Usuario env√≠a mensaje ‚Üí sendMessage() ‚Üí Env√≠a a /app/chat.sendMessage
 * 4. Servidor procesa y retransmite ‚Üí onMessageReceived() ‚Üí Muestra mensaje
 *
 * VENTAJAS VS HTTP POLLING:
 * - Latencia baja: Los mensajes llegan inmediatamente
 * - Menor carga del servidor: No hay requests constantes
 * - Menor uso de ancho de banda: Conexi√≥n persistente
 * - Mejor experiencia de usuario: Comunicaci√≥n fluida
 */